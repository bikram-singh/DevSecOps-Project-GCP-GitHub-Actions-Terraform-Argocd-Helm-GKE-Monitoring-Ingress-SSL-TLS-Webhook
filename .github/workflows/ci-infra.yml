name: DevSecOps CI/CD & Infra Pipeline

on:
  workflow_dispatch:
    inputs:
      PIPELINE:
        description: 'ci for application, infra for GKE Terraform'
        required: true
        default: 'ci'
        type: choice
        options:
          - ci
          - infra
      ACTION:
        description: 'Terraform action (ignored for ci)'
        required: false
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  pipeline:
    runs-on: self-hosted
    env:
      IMAGE_TAG: "1.0.${{ github.run_number }}"
      GOOGLE_CLOUD_PROJECT: ${{ secrets.GCP_PROJECT }}
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      # ------------------------------
      # Step 1: Checkout Repository
      # ------------------------------
      - name: 1Ô∏è‚É£ Checkout Code
        uses: actions/checkout@v3

      # ------------------------------
      # Step 2: Setup GCP Authentication
      # ------------------------------
      - name: 2Ô∏è‚É£ Setup GCP Credentials
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" > $GOOGLE_APPLICATION_CREDENTIALS
          gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
          gcloud config set project $GOOGLE_CLOUD_PROJECT
          gcloud auth configure-docker us-central1-docker.pkg.dev

      # ------------------------------
      # Step 3: Conditional Pipeline
      # ------------------------------
      - name: 3Ô∏è‚É£ Run CI/CD or Infra Pipeline
        shell: bash
        run: |
          mkdir -p reports

          if [[ "${{ github.event.inputs.PIPELINE }}" == "ci" ]]; then
            echo "Running Application CI/CD pipeline..."
            # ------------------------------
            # 3.1 Trivy Filesystem Scan
            # ------------------------------
            trivy fs --format json --output reports/trivy-fs.json app/

            # ------------------------------
            # 3.2 SonarQube Analysis
            # ------------------------------
            sonar-scanner \
              -Dsonar.projectKey=app \
              -Dsonar.projectName=app \
              -Dsonar.login=$SONAR_TOKEN
              
            # ------------------------------
            # 3.3 SonarQube Quality Gate Check + Save JSON
            # ------------------------------
            curl -s -u $SONAR_TOKEN: "https://sonarqube.example.com/api/qualitygates/project_status?projectKey=app" \
              -o reports/sonarqube.json
            SONAR_STATUS=$(jq -r '.projectStatus.status' reports/sonarqube.json)
            if [[ "$SONAR_STATUS" != "OK" ]]; then
              echo "‚ùå SonarQube Quality Gate failed: $SONAR_STATUS"
              exit 1
            fi
            
            # ------------------------------
            # 3.4 OWASP Dependency Check
            # ------------------------------
            dependency-check.sh --scan ./app --disableYarnAudit --disableNodeAudit \
              --format XML --out reports/dependency-check.xml
              
            # ------------------------------
            # 3.5 Docker Build & Push
            # ------------------------------
            docker build -t hello:latest ./app
            docker tag hello:latest us-central1-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/docker-repo/hello:$IMAGE_TAG
            docker tag hello:latest us-central1-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/docker-repo/hello:latest
            docker push us-central1-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/docker-repo/hello:$IMAGE_TAG
            docker push us-central1-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/docker-repo/hello:latest
            
            # ------------------------------
            # 3.6 Trivy Docker Image Scan
            # ------------------------------
            trivy image --format json \
              --output reports/trivy-image.json \
              us-central1-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/docker-repo/hello:$IMAGE_TAG
              
            # ------------------------------
            # 3.7 Update Helm Chart
            # ------------------------------
            sed -i "s|image:.*|image: us-central1-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/docker-repo/hello:$IMAGE_TAG|" helm/values.yaml
            git config user.email "bikram23march@gmail.com"
            git config user.name "bikram-singh"
            git add helm/values.yaml
            git commit -m "Update image to $IMAGE_TAG" || echo "No changes to commit"
            git push https://x-access-token:$GITHUB_TOKEN@github.com/bikram-singh/DevSecOps-Project-GCP-Jenkins-Terraform-Argocd-Helm-GKE-Ingress-SSL-TLS-Webhook.git main

            # ------------------------------
            # 3.8 Generate HTML Summary Report
            # ------------------------------
            echo "<html><head><title>CI/CD Summary</title></head><body>" > reports/summary.html
            echo "<h1>‚úÖ CI/CD Pipeline Report</h1>" >> reports/summary.html

            # SonarQube Result
            echo "<h2>SonarQube Quality Gate</h2>" >> reports/summary.html
            if [[ \"$SONAR_STATUS\" == \"OK\" ]]; then
              echo "<p style='color:green'>‚úÖ PASSED</p>" >> reports/summary.html
            else
              echo "<p style='color:red'>‚ùå FAILED ($SONAR_STATUS)</p>" >> reports/summary.html
            fi

            # ------------------------------
            # Trivy FS
            # ------------------------------
            TRIVY_FS_CRIT=$(jq '.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")' reports/trivy-fs.json | wc -l || true)
            echo "<h2>Trivy Filesystem Scan</h2><p>Critical Issues: $TRIVY_FS_CRIT</p>" >> reports/summary.html
            
            # ------------------------------
            # Trivy Image
            # ------------------------------
            TRIVY_IMG_CRIT=$(jq '.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")' reports/trivy-image.json | wc -l || true)
            echo "<h2>Trivy Docker Image Scan</h2><p>Critical Issues: $TRIVY_IMG_CRIT</p>" >> reports/summary.html
            
            # ------------------------------
            # OWASP
            # ------------------------------
            OWASP_CRIT=$(grep -c "CRITICAL" reports/dependency-check.xml || true)
            echo "<h2>OWASP Dependency Check</h2><p>Critical Issues: $OWASP_CRIT</p>" >> reports/summary.html

            echo "</body></html>" >> reports/summary.html

            echo "‚úÖ CI/CD pipeline completed successfully."

          else
            echo "Running Infrastructure Pipeline..."
            cd gke-terraform
            terraform init
            if [[ "${{ github.event.inputs.ACTION }}" == "apply" ]]; then
              terraform plan
              terraform apply -auto-approve
            else
              terraform destroy -auto-approve
            fi
            echo "‚úÖ Infra pipeline completed successfully."
          fi

      # ------------------------------
      # Step 4: Upload Reports
      # ------------------------------
      - name: 4Ô∏è‚É£ Upload Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/

      # ------------------------------
      # Step 5: Attach HTML Summary to GitHub Job
      # ------------------------------
      - name: 5Ô∏è‚É£ Publish HTML Summary
        if: always()
        run: |
          echo "### üìù CI/CD Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Open full report: [Download Artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat reports/summary.html >> $GITHUB_STEP_SUMMARY
