# DevSecOps CI/CD & Infra Pipeline Using GitHub Actions
#
# Step 1: Checkout Code - GitHub Actions checkout: Pulls the repository code to the runner
# Step 2: Authenticate to Google Cloud - google-github-actions/auth: Authenticate using a Service Account for GCP operations
# Step 3: Setup GCP Project & Docker Authentication - gcloud CLI: Set GCP project & configure Docker for Artifact Registry
# Step 4: Run CI/CD Pipeline
#   4.1 Trivy Filesystem Scan - Trivy: Scan local app code for vulnerabilities
#   4.2 SonarQube Project Ensure + Analysis - SonarQube: Ensure project exists, run static code analysis
#   4.3 SonarQube Quality Gate Check - SonarQube: Wait for quality gate result to pass/fail build
#   4.4 OWASP Dependency Check - OWASP Dependency Check: Scan dependencies for known vulnerabilities
#   4.5 Docker Build & Push - Docker CLI: Build Docker image, tag, and push to GCP Artifact Registry
#   4.6 Trivy Docker Image Scan - Trivy: Scan pushed Docker image for vulnerabilities
#   4.7 Update Helm Chart & Push - Helm + Git: Update Helm values with new image tag and commit changes
#   4.8 Generate HTML Summary Report - HTML + Bash: Generate CI/CD pipeline summary with scan results
# Step 5: Run Infrastructure Pipeline - Terraform: Apply/destroy GKE infrastructure
# Step 6: Upload Reports - actions/upload-artifact: Upload CI/CD security scan reports
# Step 7: Publish HTML Summary - GitHub Actions job summary: Attach HTML summary of CI/CD pipeline to GitHub job


name: DevSecOps CI/CD & Infra Pipeline Using GitHub Actions

on:
  workflow_dispatch:
    inputs:
      PIPELINE:
        description: 'ci for application, infra for GKE Terraform'
        required: true
        default: 'ci'
        type: choice
        options:
          - ci
          - infra
      ACTION:
        description: 'Terraform action (ignored for ci)'
        required: false
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  pipeline:
    runs-on: self-hosted
    env:
      IMAGE_TAG: "1.0.${{ github.run_number }}"
      GOOGLE_CLOUD_PROJECT: ${{ secrets.GCP_PROJECT }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

    steps:

      # ------------------------------
      # Step 1: Checkout Repository
      # ------------------------------
      - name: 1Ô∏è‚É£ Checkout Code
        uses: actions/checkout@v3

      # ------------------------------
      # Step 2: Authenticate to Google Cloud
      # ------------------------------
      - name: 2Ô∏è‚É£ Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # ------------------------------
      # Step 3: Setup GCP Project & Docker Auth
      # ------------------------------
      - name: 3Ô∏è‚É£ Setup GCP Project & Docker Auth
        run: |
          gcloud config set project $GOOGLE_CLOUD_PROJECT
          gcloud auth configure-docker us-central1-docker.pkg.dev  

      # ------------------------------
      # Step 4: Conditional Pipeline (CI/CD)
      # ------------------------------
      - name: 4Ô∏è‚É£ Run CI/CD Pipeline
        if: ${{ github.event.inputs.PIPELINE == 'ci' }}
        shell: bash
        run: |
          mkdir -p reports
          echo "Running Application CI/CD pipeline..."

          # ------------------------------
          # 4.1 Trivy Filesystem Scan
          # ------------------------------
          trivy fs --format json --output reports/trivy-fs.json app/

          # ------------------------------
          # 4.2 SonarQube Project Ensure + Analysis
          # ------------------------------
          PROJECT_KEY="app"
          PROJECT_NAME="My App"
          SONAR_HOST="http://104.155.137.48:9000"

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -u "${SONAR_TOKEN}:" \
            "$SONAR_HOST/api/projects/search?projects=$PROJECT_KEY")

          if [ "$STATUS" -ne 200 ]; then
            echo "üìå Project $PROJECT_KEY not found, creating..."
            curl -s -X POST \
              -u "${SONAR_TOKEN}:" \
              "$SONAR_HOST/api/projects/create" \
              -d "name=$PROJECT_NAME" \
              -d "project=$PROJECT_KEY"
            echo "‚úÖ Project created"
          else
            echo "‚úÖ Project $PROJECT_KEY already exists"
          fi

          QGATE=$(curl -s -u "${SONAR_TOKEN}:" \
            "$SONAR_HOST/api/qualitygates/get_by_project?projectKey=$PROJECT_KEY" | jq -r '.qualityGate.name // "NONE"')

          if [ "$QGATE" = "NONE" ]; then
            echo "üìå No Quality Gate assigned. Assigning default..."
            DEFAULT_QGATE=$(curl -s -u "${SONAR_TOKEN}:" \
              "$SONAR_HOST/api/qualitygates/list" | jq -r '.qualitygates[] | select(.isDefault==true) | .id')
            if [ -n "$DEFAULT_QGATE" ]; then
              curl -s -u "${SONAR_TOKEN}:" \
                -X POST "$SONAR_HOST/api/qualitygates/select" \
                -d "projectKey=$PROJECT_KEY" -d "gateId=$DEFAULT_QGATE"
              echo "‚úÖ Default Quality Gate assigned"
            else
              echo "‚ö†Ô∏è No default Quality Gate found in SonarQube"
            fi
          else
            echo "‚úÖ Quality Gate already assigned: $QGATE"
          fi

          docker run --rm \
            -v $PWD:/usr/src \
            -e SONAR_HOST_URL="$SONAR_HOST" \
            -e SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}" \
            sonarsource/sonar-scanner-cli:latest \
            -Dsonar.projectKey=$PROJECT_KEY \
            -Dsonar.sources=/usr/src/app

          echo "‚è≥ Waiting for Quality Gate status..."
          for i in {1..30}; do
            STATUS=$(curl -s -u "${SONAR_TOKEN}:" \
              "http://104.155.137.48:9000/api/qualitygates/project_status?projectKey=app" \
              | jq -r '.projectStatus.status')
            if [ "$STATUS" = "OK" ]; then
              echo "‚úÖ Quality Gate passed"
              break
            elif [ "$STATUS" = "ERROR" ]; then
              echo "‚ùå Quality Gate failed"
              exit 1
            else
              echo "‚åõ Status: $STATUS (retry $i/30)"
              sleep 5
            fi
          done

          # ------------------------------
          # 4.4 OWASP Dependency Check (commented)
          # ------------------------------
          docker run --rm -v $PWD:/src owasp/dependency-check:latest \
            --scan /src/app --disableYarnAudit --disableNodeAudit \
            --format XML --out /src/reports/dependency-check.xml

          # ------------------------------
          # 4.5 Docker Build & Push
          # ------------------------------
          docker build -t hello:latest ./app
          docker tag hello:latest us-central1-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/docker-repo/hello:$IMAGE_TAG
          docker tag hello:latest us-central1-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/docker-repo/hello:latest
          docker push us-central1-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/docker-repo/hello:$IMAGE_TAG
          docker push us-central1-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/docker-repo/hello:latest

          # ------------------------------
          # 4.6 Trivy Docker Image Scan
          # ------------------------------
          trivy image --format json \
            --output reports/trivy-image.json \
            us-central1-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/docker-repo/hello:$IMAGE_TAG

          # ------------------------------
          # 4.7 Update Helm Chart & Push with PAT
          # ------------------------------
          sed -i "s|image:.*|image: us-central1-docker.pkg.dev/$GOOGLE_CLOUD_PROJECT/docker-repo/hello:$IMAGE_TAG|" helm/values.yaml

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add helm/values.yaml
          git diff --staged --quiet || git commit -m "Update image to $IMAGE_TAG"
          git push https://$PAT_TOKEN@github.com/${{ github.repository }}.git main

          # ------------------------------
          # 4.8 Generate HTML Summary Report
          # ------------------------------
          echo "<html><head><title>CI/CD Summary</title></head><body>" > reports/summary.html
          echo "<h1>‚úÖ CI/CD Pipeline Report</h1>" >> reports/summary.html

          TRIVY_FS_CRIT=$(jq '.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")' reports/trivy-fs.json | wc -l || true)
          echo "<h2>Trivy Filesystem Scan</h2><p>Critical Issues: $TRIVY_FS_CRIT</p>" >> reports/summary.html

          TRIVY_IMG_CRIT=$(jq '.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")' reports/trivy-image.json | wc -l || true)
          echo "<h2>Trivy Docker Image Scan</h2><p>Critical Issues: $TRIVY_IMG_CRIT</p>" >> reports/summary.html

          OWASP_CRIT=$(grep -c "CRITICAL" reports/dependency-check.xml || true)
          echo "<h2>OWASP Dependency Check</h2><p>Critical Issues: $OWASP_CRIT</p>" >> reports/summary.html

          echo "</body></html>" >> reports/summary.html

          echo "‚úÖ CI/CD pipeline completed successfully."

      # ------------------------------
      # Step 4.9: Run Infrastructure Pipeline (Separate from CI/CD)
      # ------------------------------
      - name: 4.9 Run Infrastructure Pipeline
        if: ${{ github.event.inputs.PIPELINE == 'infra' }}
        shell: bash
        run: |
          echo "Running Infrastructure Pipeline..."
          cd gke-terraform
          terraform init
          if [[ "${{ github.event.inputs.ACTION }}" == "apply" ]]; then
            terraform plan
            terraform apply -auto-approve
          else
            terraform destroy -auto-approve
          fi
          echo "‚úÖ Infra pipeline completed successfully."

      # ------------------------------
      # Step 5: Upload Reports
      # ------------------------------
      - name: 5Ô∏è‚É£ Upload Reports
        if: ${{ github.event.inputs.PIPELINE == 'ci' && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/

      # ------------------------------
      # Step 6: Attach HTML Summary to GitHub Job
      # ------------------------------
      - name: 6Ô∏è‚É£ Publish HTML Summary
        if: ${{ github.event.inputs.PIPELINE == 'ci' && always() }}
        run: |
          echo "### üìù CI/CD Security Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Open full report: [Download Artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo ""
          if [ -f reports/summary.html ]; then
            cat reports/summary.html >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è reports/summary.html not found, skipping append."
          fi
